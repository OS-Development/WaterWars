HACKING

==INTRODUCTION==

Water Wars has 3 major components

1) The OpenSim Archive files (OARs) that contain the game environment and game
objects.

2) The web files that present part of the user interface for the game, as
displayed using a Second Life viewer's built in media browser.

3) The OpenSimulator region module that contains the game logic and webserver interfaces


==INTERACTION BETWEEN THE WEB UI AND THE REGION MODULE==

The Water Wars region module set up a number of webservice endpoints using
OpenSimulator's embedded HTTP server.  However, the AJAX calls in the web UI
can't communicate with these directly due to restrictions on cross-domain
requests (http://en.wikipedia.org/wiki/XMLHttpRequest#Cross-domain_requests).
At the moment, we work around these restrictions by relaying calls via the getrelay.php
and postrelay.php scripts hosted on an external webserver with the correct
domain.  In the future, this could be replaced by JSONP or Cross-Origin Resource
Sharing (CORS).

The web UI constantly keeps a request open to OpenSimulator, so that state
changes in game objects can be relayed to the page.  This is achieved through
long-polling (COMET) techniques.

Thus, the interaction between the web UI and the region module looks like this.

+---------+                      +---------------+      +---------------+
| Viewer  |      +--------+      | OpenSimulator |      |  Water Wars   |
| media   | <--> | Apache | <--> |  web server   | <--> | region module |
| browser |      +--------+      |               |      |               |
+---------+                      +---------------+      +---------------+


==GENERAL ARCHITECTURE OF THE WATER WARS REGION MODULE==

For the most part, we try and use a Model, View, Controller approach (MVC),
where the controller is game logic in the State classes, and the views are
linked to in world items in the Views packages.

View classes listen for events generated by the game.  There are some parts
where the controller calls the view classes directly - this is for historical
reasons and ideally would one day go away.

The game does not use any scripting - all in world input and output is handled
via region module code, usually the View classes.


==ORGANIZATION OF THE WATER WARS REGION MODULE==

The major packages in the Water Wars region module are as follows

Config/
  Parses the configuration file in the in-world "Game Configuration" notecard
using Nini

Events/
  Posts in game events as blue box alerts or to the HUD crawler, as appropriate.

Feeds/
  Collected in-game events so that players could see message history.  Currently
unused.

Models/
  Game models.  These are organized in a hierarchy that you can see in the
waterwars-uml.zero file (from the ArgoUML application).

Persistence/
  Code to record games as an XML file that can be analyzed afterwards.  There is
also experimental code to persist the game state (this is not currently done at
all).  However, all this is inactive

Rules/
  Embody different rules for the game (e.g. random rainfall generation compared
to fixed series).  Not all these rules are currently viable.  This package also
includes classes to manage the game date, the round and the stage timer.

States/
  The game logic is structured as a set of states.  You can see the state
machine in the waterwars-uml.zargo file.  All the core game logic is here.

Tests/
  General level game tests.  These can be run via nunit-console when the
WaterWars.dll is in the OpenSimulator bin directory.  There are also tests in
other packages throughout the code.

Views/
  A set of classes that control game objects in world and receive input from
them.  Some of these are generic (e.g. AbstractView) and others more specific
(e.g. CropsView).  The subdirectory interactions/ contains code to manage
in-world blue-box dialogs, and the widgets/ class contains code to make in-world
objects listen for events, output messages, display text, etc.

WebServices/
  Code to register webservice points for manipulation by the webpage ui.

Of the classes in the WaterWars root directory, here are the important ones.

HudViewManager
  Manages player HUDs.  Interacts with OpenSim to automatically register them
when the player enters the region, and when they cross between region
boundaries.

OpenSimGroupsMediator
  Handles Water Wars interactions with OpenSim groups.

WaterWarsCommands
  Handles commands that can be executed from the Water Wars console (e.g. ww
show status).

WaterWarsConstants
  Contains various controlling and tweakable constants for OpenSim.  Ideally,
these should be in a config file.

WaterWarsController
  The main initiating and controlling class that is launched from
WaterWarsModule.  This holds references to facilities used by the game.  It also
analyzes the region on startup to detect game objects.
